{"version":3,"sources":["logo.svg","GroupTranscript.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GroupTranscript","sendMsg","text","console","log","state","socket","emit","handleChange","event","setState","value","target","handleSend","writeSummary","summary","summarizeReq","toSummarize","transcript","fetch","method","then","res","result","error","inviteMsg","msg","props","roomCode","window","location","href","phoneNumber","mode","componentDidMount","on","data","setInterval","checkForVote","voteActive","timesAppeared","split","forEach","element","votesHeld","startVote","messages","setTimeout","endVote","wordCount","Map","e","toLowerCase","has","set","get","delete","Symbol","iterator","this","entries","sort","a","b","count","voteResult","recognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","results","length","color","openSocket","prevProps","active","start","registration","stop","style","textAlign","padding","fontSize","onChange","onClick","id","backgroundColor","width","margin","Component","App","io","React","useState","setRoomCode","connected","setConnected","connection","RTCMultiConnection","socketURL","session","audio","video","sdpConstraints","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","onstream","mediaElement","controls","cssText","document","getElementById","appendChild","className","display","height","marginBottom","outline","border","openOrJoin","alignItems","justifyContent","flexWrap","marginTop","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.4ef81b76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\r\nimport openSocket from 'socket.io-client';\r\n\r\nclass GroupTranscript extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    var recognition = new window.webkitSpeechRecognition();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = false;\r\n    recognition.lang = \"en-US\";\r\n    recognition.onresult = event => {\r\n      var transcript = event.results[event.results.length - 1][0].transcript;\r\n      this.sendMsg(transcript);\r\n    }\r\n    this.state = {\r\n      color: 'white',\r\n      socket: openSocket(\"/\"),\r\n      value: \"type something!\",\r\n      messages: \"chat transcript\",\r\n      transcript: \"\",\r\n      summary: \"\",\r\n      recognition:recognition,\r\n      voteActive: false,\r\n      votesHeld: 0,\r\n      wordCount: new Map(),\r\n      phoneNumber:\"\"\r\n    };\r\n  }\r\n  sendMsg = (text) => {\r\n    console.log(text);\r\n    this.state.socket.emit('message', text);\r\n  }\r\n  handleChange = (event) => {\r\n    this.setState({value: event.target.value});\r\n  }\r\n  handleSend = () => {\r\n    this.sendMsg(this.state.value);\r\n    this.setState({value: \"\"});\r\n  }\r\n  writeSummary = (text) => {\r\n    this.setState({summary: \"chat summary: \\n\" + text});\r\n  }\r\n  summarizeReq = () => {\r\n    var toSummarize = this.state.transcript;\r\n    fetch(\"/summarize?unpunctuated=true&body=\" + toSummarize, {\r\n      method: 'GET',\r\n      //mode: 'no-cors',\r\n    })\r\n      .then(res => res.text())\r\n      .then(\r\n        (result) => {\r\n          console.log(result);\r\n          this.writeSummary(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          console.log(\"no bueno\");\r\n          console.log(error);\r\n        }\r\n      )\r\n  }\r\n  inviteMsg = () => {\r\n    var msg = \"Hello, a friend has invited you to a meeting! Enter room code \\\"\"+this.props.roomCode+ \"\\\" at \"+window.location.href;\r\n    fetch(\"/send?to=\"+this.state.phoneNumber+\"&message=\" + msg, {\r\n      method: 'GET',\r\n      mode: 'no-cors',\r\n    });\r\n  }\r\n  componentDidMount= () => {\r\n    this.state.socket.on('news', (data) => {\r\n      console.log(data);\r\n    });\r\n    this.state.socket.on('message', (data) => {\r\n      console.log(\"message received: \" + data);\r\n      this.setState({transcript:this.state.transcript+\"\\n \"+data});\r\n      console.log(this.state.transcript);\r\n    });\r\n\r\n    var checkingForVote = setInterval(this.checkForVote, 1000);\r\n  }\r\n\r\n  checkForVote = () => {\r\n    //console.log(\"hello its working\");\r\n    if (!this.state.voteActive) {\r\n      var timesAppeared = 0;\r\n      var textToParse = this.state.transcript;\r\n      var lines = textToParse.split(\"\\n\");\r\n      lines.forEach((element) => {\r\n        //console.log(element);\r\n        var words = element.split(\" \");\r\n        words.forEach((element) => {\r\n          if (element==\"vote\") {\r\n            timesAppeared++;\r\n            if (timesAppeared > this.state.votesHeld) {\r\n              this.startVote();\r\n            }\r\n          }\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  startVote = () => {\r\n    console.log(\"vote started\");\r\n    this.setState({voteActive:true});\r\n    this.setState({messages:\"VOTE IN PROGRESS\"});\r\n    this.setState({votesHeld:this.state.votesHeld+1});\r\n    var endPoll = setTimeout(this.endVote, 20000);\r\n  }\r\n\r\n  endVote = () => {\r\n    this.setState({voteActive:false});\r\n    this.setState({messages:\"chat transcript\"});\r\n    console.log(\"vote finished\");\r\n    this.state.wordCount = new Map();\r\n    var textToParse = this.state.transcript;\r\n    var lines = textToParse.split(\"\\n\");\r\n    lines.forEach((element) => {\r\n      //console.log(element);\r\n      var words = element.split(\" \");\r\n      words.forEach((e) => {\r\n        var element = e.toLowerCase();\r\n        if (this.state.wordCount.has(element)) {\r\n          this.state.wordCount.set(element, this.state.wordCount.get(element) + 1);\r\n        } else {\r\n          this.state.wordCount.set(element, 1);\r\n        }\r\n      })\r\n    });\r\n    const filterOut = [\"\", \"vote\", \"and\", \"is\", \"to\", \"or\", \"the\", \"of\", \"a\", \"in\", \"that\", \"it\", \"for\", \"on\"];\r\n    filterOut.forEach((e) => {\r\n      var element = e.toLowerCase();\r\n      if (this.state.wordCount.has(element)) {\r\n        this.state.wordCount.delete(element);\r\n      }\r\n    })\r\n    console.log(this.state.wordCount);\r\n\r\n    this.state.wordCount[Symbol.iterator] = function* () {\r\n        yield* [...this.entries()].sort((a, b) => b[1] - a[1]);\r\n    }\r\n    var count = 0;\r\n    var voteResult = \"Vote Complete. Top 3 Results were: \\n\";\r\n    for (let [key, value] of this.state.wordCount) {     // get data sorted\r\n      count++;\r\n      voteResult += key + \" with \" + value + \" votes \\n\"\r\n      if (count == 3) {\r\n        break;\r\n      }\r\n    }\r\n    this.setState({transcript:this.state.transcript+'\\n'+voteResult});\r\n\r\n    //this.setState({transcript:\"\"});\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.active != this.props.active) {\r\n      if (this.props.active == true) {\r\n        this.state.recognition.start();\r\n      } else {\r\n        this.state.registration.stop();\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.active)\r\n      return null;\r\n    return (\r\n      <div style={{ textAlign: \"center\", padding: 5 }}>\r\n        <h2>Room Code:</h2> <strong style={{fontSize:30}}> {this.props.roomCode}</strong>\r\n        <p>\r\n        Invite a friend (phone number) <br/>\r\n        <input value={this.state.phoneNumber} onChange={(e)=>this.setState({phoneNumber:e.target.value})}/>\r\n        <button onClick={(e)=>{\r\n          this.inviteMsg();\r\n          this.setState({phoneNumber:\"\"})\r\n        }}> send </button>\r\n        </p>\r\n        {/*\r\n        <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\r\n        <button onClick={this.handleSend}> send </button>\r\n        */}\r\n        <div>\r\n          <button id=\"summarize\" onClick={this.summarizeReq}>Summarize Meeting</button>\r\n          <p>{this.state.summary}</p>\r\n          <p> <strong> {this.state.messages} </strong> </p>\r\n          {/**<p value={this.state.messages}> </p>**/}\r\n        </div>\r\n        <div style={{\r\n          textAlign:'left',\r\n          backgroundColor:'#333',\r\n          width:'90%',\r\n          margin:'auto'\r\n        }}>\r\n          <pre>{this.state.transcript}</pre>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GroupTranscript;\r\n","import React from 'react';\r\nimport {\r\n  RTCPeerConnection,\r\n  RTCIceCandidate,\r\n  RTCSessionDescription,\r\n  RTCView,\r\n  MediaStream,\r\n  MediaStreamTrack,\r\n  getUserMedia,\r\n} from 'react-webrtc';\r\nimport * as io from 'socket.io-client'\r\nimport RTCMultiConnection from 'rtcmulticonnection';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport GroupTranscript from \"./GroupTranscript.js\"\r\n\r\nfunction App() {\r\n  window.io = io;\r\n\r\n  const [roomCode,setRoomCode] = React.useState(\"\");\r\n  const [connected,setConnected] = React.useState(false);\r\n\r\n  var connection = new RTCMultiConnection();\r\n  connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';\r\n  connection.session = {\r\n    audio: true,\r\n    video: true\r\n  };\r\n  connection.sdpConstraints.mandatory = {\r\n    OfferToReceiveAudio: true,\r\n    OfferToReceiveVideo: true\r\n  };\r\n  connection.onstream = function(event) {\r\n    var video = event.mediaElement;\r\n    video.controls = false;\r\n    video.style.cssText = `-moz-transform: scale(-1, 1);\r\n-webkit-transform: scale(-1, 1); -o-transform: scale(-1, 1);\r\ntransform: scale(-1, 1); filter: FlipH; width: 300px;`;\r\n    document.getElementById(\"callers\").appendChild( event.mediaElement );\r\n  };\r\n  const joinRoom = () => {\r\n    if (!roomCode)\r\n      return;\r\n    connection.openOrJoin(roomCode);\r\n    setConnected(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{display: connected? \"none\":\"block\",textAlign:'center'}}>\r\n        <h1>AutoScribe</h1><br/>\r\n        <h2>Enter your roomcode below</h2><br/>\r\n        <input onChange={(e)=>setRoomCode(e.target.value)} style={{\r\n          width:600,\r\n          height:80,\r\n          marginBottom:20,\r\n          outline:'none',\r\n          border: 'solid 1px',\r\n          padding:5,\r\n          fontSize:40,\r\n          textAlign:'center'\r\n        }} /><br/>\r\n        <button style={{\r\n          width:400,\r\n          fontSize:30,\r\n          padding:20\r\n        }} onClick={joinRoom}>Join Room</button>\r\n      </div>\r\n      <div style={{\r\n        display:'flex'\r\n      }}>\r\n        <div id=\"callers\" style={{\r\n          width:\"70vw\",\r\n          display:'flex',\r\n          alignItems:'center',\r\n          height:'99vh',\r\n          justifyContent:'space-around',\r\n          flexWrap:'wrap',\r\n          marginTop:'10px'\r\n        }}></div>\r\n        <div style={{\r\n          width:\"29vw\"\r\n        }}>\r\n          <GroupTranscript roomCode={roomCode} active = {connected}  />\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}